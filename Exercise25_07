package projects;

import java.util.Collection;
import java.util.Comparator;
import java.util.Scanner;

public class Exercise25_07 {
	  public static void main(String[] args) {
	    BSTWithNumberOfNonLeaves<String> tree = new BSTWithNumberOfNonLeaves<>();
	    Scanner input = new Scanner(System.in);
	    System.out.print("Enter six strings: ");
	    for (int i = 0; i < 6; i++) {
	      String s = input.next();
	      tree.insert(s.trim());
	    }
	    System.out.println("The number of non-leaves in the tree is " + tree.getNumberOfNonLeaves());
	  }
	}

	interface Tree<E> extends java.util.Collection<E> {
	  public boolean search(E e);
	  public boolean insert(E e);
	  public boolean delete(E e);
	  public int getSize();
	  public default void inorder() {}
	  public default void postorder() {}
	  public default void preorder() {}

	  @Override
	  public default boolean isEmpty() {
	    return size() == 0;
	  };

	  @Override
	  public default boolean contains(Object e) {
	    return search((E)e);
	  }

	  @Override
	  public default boolean add(E e) {
	    return insert(e);
	  }

	  @Override
	  public default boolean remove(Object e) {
	    return delete((E)e);
	  }

	  @Override
	  public default int size() {
	    return getSize();
	  }

	  @Override
	  public default boolean containsAll(Collection<?> c) {
	    // Left as an exercise
	    return false;
	  }

	  @Override
	  public default boolean addAll(Collection<? extends E> c) {
	    // Left as an exercise
	    return false;
	  }

	  @Override
	  public default boolean removeAll(Collection<?> c) {
	    // Left as an exercise
	    return false;
	  }

	  @Override
	  public default boolean retainAll(Collection<?> c) {
	    // Left as an exercise
	    return false;
	  }

	  @Override
	  public default Object[] toArray() {
	    // Left as an exercise
	    return null;
	  }

	  @Override
	  public default <T> T[] toArray(T[] array) {
	    // Left as an exercise
	    return null;
	  }
	}

	class BST<E> implements Tree<E> {
	  protected TreeNode<E> root;
	  protected int size = 0;
	  protected java.util.Comparator<E> c;

	  public BST() {
	    this.c = (Comparator<E>) new Comparator<E>() {
	      public int compare(E e1, E e2) {
	        return ((Comparable<E>)e1).compareTo(e2);
	      }
	    };
	  }

	  public BST(java.util.Comparator<E> c) {
	    this.c = c;
	  }

	  public BST(E[] objects) {
	    this();
	    for (int i = 0; i < objects.length; i++)
	      add(objects[i]);
	  }

	  @Override
	  public boolean search(E e) {
	    TreeNode<E> current = root;

	    while (current != null) {
	      if (c.compare(e, current.element) < 0) {
	        current = current.left;
	      }
	      else if (c.compare(e, current.element) > 0) {
	        current = current.right;
	      }
	      else
	        return true;
	    }

	    return false;
	  }

	  @Override
	  public boolean insert(E e) {
	    if (root == null)
	      root = createNewNode(e);
	    else {
	      TreeNode<E> parent = null;
	      TreeNode<E> current = root;
	      while (current != null)
	        if (c.compare(e, current.element) < 0) {
	          parent = current;
	          current = current.left;
	        }
	        else if (c.compare(e, current.element) > 0) {
	          parent = current;
	          current = current.right;
	        }
	        else
	          return false;

	      if (c.compare(e, parent.element) < 0)
	        parent.left = createNewNode(e);
	      else
	        parent.right = createNewNode(e);
	    }

	    size++;
	    return true;
	  }

	  protected TreeNode<E> createNewNode(E e) {
	    return new TreeNode<>(e);
	  }

	  @Override
	  public void inorder() {
	    inorder(root);
	  }

	  protected void inorder(TreeNode<E> root) {
	    if (root == null) return;
	    inorder(root.left);
	    System.out.print(root.element + " ");
	    inorder(root.right);
	  }

	  @Override
	  public void postorder() {
	    postorder(root);
	  }

	  protected void postorder(TreeNode<E> root) {
	    if (root == null) return;
	    postorder(root.left);
	    postorder(root.right);
	    System.out.print(root.element + " ");
	  }

	  @Override
	  public void preorder() {
	    preorder(root);
	  }

	  protected void preorder(TreeNode<E> root) {
	    if (root == null) return;
	    System.out.print(root.element + " ");
	    preorder(root.left);
	    preorder(root.right);
	  }

	  public static class TreeNode<E> {
	    protected E element;
	    protected TreeNode<E> left;
	    protected TreeNode<E> right;

	    public TreeNode(E e) {
	      element = e;
	    }
	  }

	  @Override
	  public int getSize() {
	    return size;
	  }

	  public TreeNode<E> getRoot() {
	    return root;
	  }

	  public java.util.ArrayList<TreeNode<E>> path(E e) {
	    java.util.ArrayList<TreeNode<E>> list =
	      new java.util.ArrayList<>();
	    TreeNode<E> current = root;

	    while (current != null) {
	      list.add(current);
	      if (c.compare(e, current.element) < 0) {
	        current = current.left;
	      }
	      else if (c.compare(e, current.element) > 0) {
	        current = current.right;
	      }
	      else
	        break;
	    }

	    return list;
	  }

	  @Override
	  public boolean delete(E e) {
	    TreeNode<E> parent = null;
	    TreeNode<E> current = root;
	    while (current != null) {
	      if (c.compare(e, current.element) < 0) {
	        parent = current;
	        current = current.left;
	      }
	      else if (c.compare(e, current.element) > 0) {
	        parent = current;
	        current = current.right;
	      }
	      else
	        break;
	    }

	    if (current == null)
	      return false;

	    if (current.left == null) {
	      if (parent == null) {
	        root = current.right;
	      }
	      else {
	        if (c.compare(e, parent.element) < 0)
	          parent.left = current.right;
	        else
	          parent.right = current.right;
	      }
	    }
	    else {
	      TreeNode<E> parentOfRightMost = current;
	      TreeNode<E> rightMost = current.left;

	      while (rightMost.right != null) {
	        parentOfRightMost = rightMost;
	        rightMost = rightMost.right;
	      }

	      current.element = rightMost.element;

	      if (parentOfRightMost.right == rightMost)
	        parentOfRightMost.right = rightMost.left;
	      else
	        parentOfRightMost.left = rightMost.left;
	    }

	    size--;
	    return true;
	  }

	  @Override
	  public java.util.Iterator<E> iterator() {
	    return new InorderIterator();
	  }

	  private class InorderIterator implements java.util.Iterator<E> {
	    private java.util.ArrayList<E> list =
	      new java.util.ArrayList<>();
	    private int current = 0;

	    public InorderIterator() {
	      inorder();
	    }

	    private void inorder() {
	      inorder(root);
	    }

	    private void inorder(TreeNode<E> root) {
	      if (root == null) return;
	      inorder(root.left);
	      list.add(root.element);
	      inorder(root.right);
	    }

	    @Override
	    public boolean hasNext() {
	      if (current < list.size())
	        return true;

	      return false;
	    }

	    @Override
	    public E next() {
	      return list.get(current++);
	    }

	    @Override
	    public void remove() {
	      if (current == 0)
	        throw new IllegalStateException();

	      delete(list.get(--current));
	      list.clear();
	      inorder();
	    }
	  }

	  @Override
	  public void clear() {
	    root = null;
	    size = 0;
	  }

	  @Override
	  public boolean containsAll(Collection<?> c) {
	    // Left as an exercise
	    return false;
	  }

	  @Override
	  public boolean addAll(Collection<? extends E> c) {
	    // Left as an exercise
	    return false;
	  }

	  @Override
	  public boolean removeAll(Collection<?> c) {
	    // Left as an exercise
	    return false;
	  }

	  @Override
	  public boolean retainAll(Collection<?> c) {
	    // Left as an exercise
	    return false;
	  }

	  @Override
	  public Object[] toArray() {
	    // Left as an exercise
	    return null;
	  }

	  @Override
	  public <T> T[] toArray(T[] array) {
	    // Left as an exercise
	    return null;
	  }
	}

	class BSTWithNumberOfNonLeaves<E> extends BST<E> {
	  public BSTWithNumberOfNonLeaves() {
	    super();
	  }

	  public BSTWithNumberOfNonLeaves(java.util.Comparator<E> c) {
	    super(c);
	  }

	  public BSTWithNumberOfNonLeaves(E[] objects) {
	    super(objects);
	  }

	  public int getNumberOfNonLeaves() {
	    return getNumberOfNonLeaves(root);
	  }

	  private int getNumberOfNonLeaves(TreeNode<E> root) {
	    if (root == null || (root.left == null && root.right == null)) {
	      return 0;
	    } else {
	      int leftNonLeaves = getNumberOfNonLeaves(root.left);
	      int rightNonLeaves = getNumberOfNonLeaves(root.right);

	      return (root.left != null || root.right != null) ? 1 + leftNonLeaves + rightNonLeaves : 0;
	    }
	  }
	}
